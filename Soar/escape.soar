rl -s learning on # enable RL
indifferent-selection -g # use epsilon-greedy decision making
indifferent-selection -e 0.1 # 10% deviation from greedy

#################################################################################################BEGIN



##
###	I.	Propose the top space
###
### The code in this section proposes a simple space to work in, and a
### simple state to start working in.

sp {propose*initialize-es
   (state <s> -^name ^superstate nil)
    -->
   (<s> ^operator <o> +)
   (<o> ^name initialize-escape)
}

##
# Store the available directions
# and associated reward on the state
##
sp {apply*initialize-escape
   (state <s> ^operator <o>)
   (<o> ^name initialize-escape)
    -->
   (<s> ^name escape
        ^desired <d>
        ^robot <r>
        ^window <w> 
        ^objects <o1> <o2> <o3> <o4>
        ^comb <c1> <c2> <c3> <c4>)
   (<d> ^out no)
   (<r> ^height 1.5
        ^location <loc1>)
   (<loc1> ^x 5.0 ^y 3.0)         
   (<w> ^location <loc2>
        ^corners <ul> <ur> <ll> <lr>
        ^broken no 
        ^height 3.5)
   (<loc2> ^x 3.0 ^y 4.0)
   (<ul> ^name upper-left
         ^hit no
         ^reward -1)
   (<ur> ^name upper-right
         ^hit no
         ^reward 1)
   (<ll> ^name lower-left
         ^hit no
         ^reward 1)
   (<lr> ^name lower-right
         ^hit no
         ^reward -1)                              
   (<o1> ^name spring
         ^available yes)
   (<o2> ^name sprig
         ^available yes)
   (<o3> ^name stone
         ^available yes)
   (<o4> ^name trunk
         ^available yes)      
   (<c1> ^name stone-sprig
         ^built no
         ^object1 stone
         ^object2 sprig
         ^reward -1)
   (<c2> ^name spring-sprig
         ^built no
         ^object1 spring
         ^object2 sprig
         ^reward 1)
   (<c3> ^name stone-spring
         ^built no
         ^object1 stone
         ^object2 spring
         ^reward -1)
   (<c4> ^name trunks
         ^built no
         ^object trunk)
}


###
###	II.	Propose the main operators
###
### The code in this section proposes the four operators left, right, backward and forward. 

##
# Propose rule for moving left
##
sp {es*propose*left
   (state <s> ^name escape
              ^desired <d>
              ^robot <r>
              ^window <w>)
   (<d> ^out no)                      
   (<r> ^location <loc1>)
   (<w> ^location <loc2>)
   (<loc2> ^x <val2>)
   (<loc1> ^x <val1> > <val2>)
    -->
   (<s> ^operator <op>)
   (<op> ^name move
         ^dir left)
}

##
# Propose rule for moving right 
##

sp {es*propose*right
   (state <s> ^name escape
              ^desired <d>
              ^robot <r>
              ^window <w>)
   (<d> ^out no)
   (<r> ^location <loc1>)
   (<w> ^location <loc2>)           
   (<loc2> ^x <val2>)
   (<loc1> ^x <val1> < <val2>)
    -->
   (<s> ^operator <op>)
   (<op> ^name move
         ^dir right)
}


##
# Propose rule for moving backward
##

sp {es*propose*backward
   (state <s> ^name escape
              ^desired <d>
              ^robot <r>
              ^window <w>)
   (<d> ^out no)
   (<r> ^location <loc1>)
   (<w> ^location <loc2>)           
   (<loc2> ^y <val2>)
   (<loc1> ^y <val1> > <val2>)
    -->
   (<s> ^operator <op>)
   (<op> ^name move
         ^dir backward)
}

##
# Propose rule for moving forward
##

sp {es*propose*forward
   (state <s> ^name escape
              ^desired <d>
              ^robot <r>
              ^window <w>)
   (<d> ^out no)
   (<r> ^location <loc1>)
   (<w> ^location <loc2>)
   (<loc2> ^y <val2>)
   (<loc1> ^y <val1> < <val2>)      
    -->
   (<s> ^operator <op>)
   (<op> ^name move
         ^dir forward)
}

##
# Propose rule for moving up with trunks
##

sp {es*propose*up
   (state <s> ^name escape
              ^desired <d>
              ^comb <c>
              ^robot <r>
              ^window <w>)
   (<d> ^out no)
   (<c> ^name trunks ^built yes)
   (<w> ^broken yes 
        ^height <val1>
        ^location <loc2>)
   (<r> ^height <val2> < <val1>) 
   (<r> ^location <loc1>)            
   (<loc1> ^x <val3> ^y <val4>)
   (<loc2> ^x <val3> ^y <val4>)    
    -->
   (<s> ^operator <op>)
   (<op> ^name move
         ^dir up)
}


##
# Comparison between movements
##

sp {es*compare*right*better*forward
   (state <s> ^name escape
              ^desired <d>)
   (<d> ^out no)
   (<s> ^operator <op-right> +)
   (<op-right> ^name move
               ^dir right)
   (<s> ^operator <op-forward> +)
   (<op-forward> ^name move
                 ^dir forward)
    -->
   (<s> ^operator <op-right> > <op-forward>)
}

sp {es*compare*right*better*backward
   (state <s> ^name escape
              ^desired <d>)
   (<d> ^out no)
   (<s> ^operator <op-right> +)
   (<op-right> ^name move
               ^dir right)
   (<s> ^operator <op-backward> +)
   (<op-backward> ^name move
                 ^dir backward)
    -->
   (<s> ^operator <op-right> > <op-backward>)
}

sp {es*compare*left*better*backward
   (state <s> ^name escape
              ^desired <d>)
   (<d> ^out no) 
   (<s> ^operator <op-left> +)
   (<op-left> ^name move
              ^dir left)
   (<s> ^operator <op-backward> +)
   (<op-backward> ^name move
                  ^dir backward)
    -->
   (<s> ^operator <op-left> > <op-backward>)
}  


sp {es*compare*left*better*forward
   (state <s> ^name escape
              ^desired <d>)
   (<d> ^out no)
   (<s> ^operator <op-left> +)
   (<op-left> ^name move
              ^dir left)
   (<s> ^operator <op-forward> +)
   (<op-forward> ^name move
                 ^dir forward)
    -->
   (<s> ^operator <op-left> > <op-forward>)
}  

###
###	III.	Implement the main operators for move 
###

## Implement the operators with productions that modify the state once
## the operators have been selected, and then terminate them after
## they have done. 

sp {es*apply-op*left
   (state <s>  ^name escape
               ^operator <o>
               ^robot <r>)            
   (<o> ^name move
        ^dir left)
   (<r> ^location <loc>)     
   (<loc> ^x <val>)
    -->
   (<loc> ^x <val> - (- <val> 0.5))
   (write (crlf) |          Moved: left! | current | | location: | x: | (- <val> 0.5))
   (<s> ^operator <o> -)
}


## Implement right

sp {es*apply-op*right
   (state <s>  ^name escape
               ^operator <o>
               ^robot <r>)
   (<o> ^name move
        ^dir right)
   (<r> ^location <loc>)   
   (<loc> ^x <val>)
    -->
   (<loc> ^x <val> - (+ <val> 0.5))
   (write (crlf) |          Moved: right! | current | | location: | x: | (+ <val> 0.5))
   (<s> ^operator <o> -)
}

## Implement backward

sp {es*apply-op*backward
   (state <s>  ^name escape
               ^operator <o>
               ^robot <r>)
   (<o> ^name move
        ^dir backward)
   (<r> ^location <loc>)     
   (<loc> ^y <val>)
    -->
   (<loc> ^y <val> - (- <val> 0.5))
   (write (crlf) |          Moved: backward! | current | | location: | y: | (- <val> 0.5))
   (<s> ^operator <o> -)
}


## Implement forward

sp {es*apply-op*forward
   (state <s>  ^name escape
               ^operator <o>
               ^robot <r>)
   (<o> ^name move
       ^dir forward)
   (<r> ^location <loc>)    
   (<loc> ^y <val>)
    -->
   (<loc> ^y <val> - (+ <val> 0.5))
   (write (crlf) |          Moved: forward! | current | | location: | y: | (+ <val> 0.5))
   (<s> ^operator <o> -)
}


## Implement up

sp {es*apply-op*up
   (state <s>  ^name escape
               ^operator <o>
               ^robot <r>)
   (<o> ^name move
        ^dir up)
   (<r> ^height <val>)
    -->
   (<r> ^height <val> - (+ <val> 0.5))
   (write (crlf) |          Moved: up! | current | | location | height: | (+ <val> 0.5))
   (<s> ^operator <o> -)
}


###
###	IV.		Propose the main operators to combine objects into a useful object to escape the room
###

sp {es*propose*combine
   (state <s> ^name escape
              ^desired <d>
              ^window <w>
              ^robot <r>
              ^comb <c>)
   (<d> ^out no)
   (<w> ^broken no
        ^location <loc1>) 
   (<loc1> ^x <val1> ^y <val2>)
   (<r> ^location <loc2>)        
   (<loc2> ^x <val1> ^y <val2>)      
   (<c> ^name <obj> 
        ^built no
        ^object1 <obj1>
        ^object2 <obj2>)
   (<s> ^objects <o1> <o2>)
   (<o1> ^name <obj1>
         ^available yes)
   (<o2> ^name <obj2>
         ^available yes)        
    -->
   (<s> ^operator <op> +)
   (<op> ^name combine
         ^obj <obj>)
}


###
### V.     Soar reinforcement learning for the main operators that combine objects into a useful object to escape the room
###

## Soar-RL rule for combine of stone and sprig of wood 

sp {es*rl*combine*stone*sprig
   (state <s> ^name escape
              ^operator <op> +)
   (<op> ^name combine
         ^obj stone-sprig)
    -->
   (<s> ^operator <op> = 0)
}

## Soar-RL rule for combine of spring and sprig of wood

sp {es*rl*combine*spring*sprig
   (state <s> ^name escape
              ^operator <op> +)
   (<op> ^name combine
         ^obj spring-sprig)
    -->
   (<s> ^operator <op> = 0)
}

## Soar-RL rule for combine of stone and spring

sp {es*rl*combine*stone*spring
   (state <s> ^name escape
              ^operator <op> +)
   (<op> ^name combine
         ^obj stone-spring)
    -->
   (<s> ^operator <op> = 0)
}

##
# When a combine is chosen:
# - change object built
# - change object combined available
# - output built
##

sp {apply*combine
   (state <s> ^name escape
              ^operator <op>
              ^comb <c>
              ^objects <o1> <o2>)
   (<op> ^name combine
         ^obj <obj>)
   (<c> ^name <obj>
        ^built no
        ^object1 <obj1>
        ^object2 <obj2>)
   (<o1> ^name <obj1>
         ^available yes)
   (<o2> ^name <obj2>
         ^available yes)
    -->
   (<o1> ^name <obj1>
         ^available yes - no)
   (<o2> ^name <obj2>
         ^available yes - no)
   (<c> ^built no - yes)
   (write (crlf) |                           Built: | <obj>)
}

##
# When a combine is chosen, assert the associated reward
##
sp {elaborate*reward*success
   (state <s> ^reward-link <rl>
              ^comb <c>)
   (<c> ^name <c-name> 
        ^built yes
        ^reward <rwd> > 0)   
    --> 
   (<rl> ^reward <r>)
   (<r> ^value <rwd>)
   (write (crlf) |                           REWARD | <c-name> | | <rwd>)
}

##
# When the combination is not correct, a state of empasse is reached 
# because there will be no applicable operators
##

sp {elaborate*reward*failure
   (state <s> ^reward-link <rl>
              ^comb <c>)
   (<c> ^name <c-name> 
        ^built yes
        ^reward <rwd> < 0)   
    --> 
   (<rl> ^reward <r>)
   (<r> ^value <rwd>)
   (write (crlf) |                           REWARD | <c-name> | | <rwd>)
   (write (crlf) |                          No operator can be selected for the top goal. |) 
   (write (crlf) |                          The robot failed to leave the room. |)    
   (halt)
}



###
### VI. Propose and apply the main operator to break the window throwing stones
###


sp {es*propose*stone*throwing
   (state <s> ^name escape
              ^window <w>
              ^comb <c>
              ^objects <ob>)            
   (<w> ^corners <cr>
        ^broken no)
   (<cr> ^name <c-name>)
   (<c> ^name spring-sprig
        ^built yes)  
   (<ob> ^name stone
         ^available yes)            
    --> 
   (<s> ^operator <op>)
   (<op> ^name throw
         ^corner <c-name>)
}

## Soar-RL rule for throw at the upper left corner of the window

sp {es*rl*throw*upper*left
   (state <s> ^name escape
              ^operator <op> +)
   (<op> ^name throw
         ^corner upper-left)
    -->
   (<s> ^operator <op> = 0)
}

## Soar-RL rule for throw at the upper right corner of the window

sp {es*rl*throw*upper*right
   (state <s> ^name escape
              ^operator <op> +)
   (<op> ^name throw
         ^corner upper-right)
    -->
   (<s> ^operator <op> = 0)
}

## Soar-RL rule for throw at the lower left corner of the window

sp {es*rl*throw*lower*left
   (state <s> ^name escape
              ^operator <op> +)
   (<op> ^name throw
         ^corner lower-left)
    -->
   (<s> ^operator <op> = 0)
}

## Soar-RL rule for throw at the lower right corner of the window

sp {es*rl*throw*lower*right
   (state <s> ^name escape
              ^operator <op> +)
   (<op> ^name throw
         ^corner lower-right)
    -->
   (<s> ^operator <op> = 0)
}

##
# When a corner is chosen:
# - change corner hit
# - change object stone available
# - output stone throwing
##

sp {es*apply-op*stone*throwing
   (state <s> ^name escape
              ^operator <op>
              ^window <w>
              ^objects <ob>)                   
   (<op> ^name throw
         ^corner <c-name>)  
   (<w> ^corners <c>)
   (<c> ^name <c-name>)
   (<ob> ^name stone
         ^available yes)     
    -->
   (<c> ^hit no - yes)
   (<ob> ^available yes - no)
   (write (crlf) |                           Stone throwing! | <c-name>)
}

sp {elaborate*reward*throw*success
   (state <s> ^reward-link <rl>
              ^window <w>) 
   (<w> ^corners <c>)           
   (<c> ^name <c-name> 
        ^hit yes
        ^reward <rwd>)    
    -->
   (<rl> ^reward <r>)
   (<r> ^value <rwd>)
   (write (crlf) |                           REWARD | <c-name> | | <rwd>)
}

sp {elaborate*reward*throw*failure
   (state <s> ^reward-link <rl>
              ^window <w>) 
   (<w> ^corners <c>)           
   (<c> ^name <c-name> 
        ^hit yes
        ^reward <rwd> < 0)     
    -->
   (<rl> ^reward <r>)
   (<r> ^value <rwd>)
   (write (crlf) |                          No operator can be selected for the top goal. |) 
   (write (crlf) |                          The robot failed to leave the room. |)    
   (halt)
}

##
# When the stone hits particular predetermined angles, the window is broken. 
# The corners with associated positive rewards are the correct ones to hit. 
##

sp {terminate*reward*throw*success
   (state <s> ^name escape
              ^window <w>)
   (<w> ^corners <c>)
   (<c> ^hit yes
        ^reward <val> > 0) 
    -->
   (<w> ^broken no - yes)
   (write (crlf) |                           WINDOW | BROKEN )
}


###
### VII. Propose and apply the main operator to combine trunks in order to reach 
### the window and leave the room. 
###

sp {es*propose*combine*trunks
   (state <s> ^name escape
              ^window <w>
              ^comb <c>
              ^objects <o>)
   (<w> ^broken yes)
   (<c> ^name trunks
        ^built no
        ^object trunk)  
   (<o> ^name trunk
        ^available yes)   
    -->
   (<s> ^operator <op>) 
   (<op> ^name combine
         ^obj trunks)   
}


sp {es*apply-op*combine*trunks
   (state <s> ^name escape
              ^operator <op>
              ^comb <c>
              ^objects <o>)
   (<op> ^name combine
         ^obj trunks)
   (<c> ^name trunks
        ^built no
        ^object trunk)
   (<o> ^name trunk
        ^available yes)
    -->
   (<o> ^available yes - no)
   (<c> ^built no - yes)
   (write (crlf) |                           Built: | trunks)  
}

###
### VIII. Propose and apply to go out of the room if the window is broken 
### and the robot is at the window. 
###
 
sp {es*propose*out
   (state <s> ^name escape
              ^desired <d>
              ^robot <r>
              ^window <w>)
   (<d> ^out no)           
   (<r> ^height <h>
        ^location <loc1>)
   (<loc1> ^x <val1> ^y <val2>)     
   (<w> ^height <h>
        ^broken yes
        ^location <loc2>) 
   (<loc2> ^x <val1> ^y <val2>)     
    -->
   (<s> ^operator <op>)
   (<op> ^name move
         ^dir out)
}


sp {es*apply-op*out
   (state <s>  ^name escape
               ^operator <o>
               ^desired <d>)
   (<o> ^name move 
        ^dir out)
   (<d> ^out no)     
    -->
   (<d> ^out no - yes)
   (write (crlf) |          Moved: out! |)
   (<s> ^operator <o> -)
}


###
###	IX.	Noticing when goal is reached
###
### This code terminates the problem solving when the goal is reached.

sp {es*evaluate*state*success
   (state <s> ^name escape
              ^desired <d>)
   (<d> ^out yes)           
    -->
   (<s> ^success <d>)
}


## One of the default rules is brought in to notice that we are 
## finished.  (Slightly modified to be more compact and less general.)

sp {default*top-goal*halt*state*success
    :default
   (state <s>  ^desired <eb>) 
   (<s> ^success <eb>)
    -->
   (write (crlf)  |  goal for  | <s>  | achieved |)
   (halt)
}